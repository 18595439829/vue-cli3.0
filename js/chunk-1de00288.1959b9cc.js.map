{"version":3,"sources":["webpack:///./src/views/ol/TileLayer.vue?1924","webpack:///./src/views/ol/TileLayer.vue?41c4","webpack:///./src/views/ol/TileLayer.vue?7b9a","webpack:///./node_modules/ol/uri.js","webpack:///./node_modules/ol/source/TileArcGISRest.js","webpack:///src/views/ol/TileLayer.vue","webpack:///./src/views/ol/TileLayer.vue?5d1d","webpack:///./src/views/ol/TileLayer.vue"],"names":["_node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_0_0_node_modules_css_loader_index_js_ref_10_oneOf_0_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_0_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_0_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_TileLayer_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_0_0_node_modules_css_loader_index_js_ref_10_oneOf_0_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_0_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_0_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_TileLayer_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0___default","n","__webpack_exports__","module","exports","map","render","_vm","this","_h","$createElement","_c","_self","on","click","addTileLayer","_v","class","$style","attrs","id","staticRenderFns","appendParams","uri","params","keyParams","Object","keys","forEach","k","undefined","push","encodeURIComponent","qs","join","replace","indexOf","TileArcGISRest_TileArcGISRest","TileImage","TileArcGISRest","opt_options","options","call","attributions","cacheSize","crossOrigin","projection","reprojectionErrorThreshold","tileGrid","tileLoadFunction","tileUrlFunction","url","urls","wrapX","transition","params_","tmpExtent_","extent","setKey","getKeyForParams_","__proto__","prototype","create","constructor","i","res","key","getParams","getRequestUrl_","tileCoord","tileSize","tileExtent","pixelRatio","srid","getCode","split","pop","Math","round","length","index","math","tilecoord","modifiedUrl","getTilePixelRatio","updateParams","obj","source_TileImage","getTileGrid","getTileGridForProjection","getResolutions","getTileCoordExtent","size","getTileSize","tmpSize","baseParams","F","FORMAT","TRANSPARENT","source_TileArcGISRest","TileLayervue_type_script_lang_js_","name","data","mounted","initMap","methods","Map","layers","Tile","source","OSM","target","view","View","center","zoom","layer","addLayer","ol_TileLayervue_type_script_lang_js_","injectStyles","context","TileLayervue_type_style_index_0_lang_less_module_true_","locals","component","componentNormalizer"],"mappings":"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","file":"js/chunk-1de00288.1959b9cc.js","sourcesContent":["import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-0-0!../../../node_modules/css-loader/index.js??ref--10-oneOf-0-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-0-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-0-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TileLayer.vue?vue&type=style&index=0&lang=less&module=true&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-0-0!../../../node_modules/css-loader/index.js??ref--10-oneOf-0-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-0-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-0-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TileLayer.vue?vue&type=style&index=0&lang=less&module=true&\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"TileLayer_map_3o5nI\"};","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('Button',{on:{\"click\":_vm.addTileLayer}},[_vm._v(\"添加TileLayer\")]),_c('div',{class:_vm.$style['map'],attrs:{\"id\":\"map\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\n * @module ol/uri\n */\n\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  var keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function(k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  var qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri = uri.indexOf('?') === -1 ? uri + '?' : uri + '&';\n  return uri + qs;\n}\n\n//# sourceMappingURL=uri.js.map","/**\n * @module ol/source/TileArcGISRest\n */\n\nimport {createEmpty} from '../extent.js';\nimport {modulo} from '../math.js';\nimport {assign} from '../obj.js';\nimport {toSize, scale as scaleSize} from '../size.js';\nimport TileImage from './TileImage.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.\n * Note that you must provide a `crossOrigin` value if you are using the WebGL renderer\n * or if you want to access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\n * for more detail.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/\n * for further reference.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} urls ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n */\n\n\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\nvar TileArcGISRest = /*@__PURE__*/(function (TileImage) {\n  function TileArcGISRest(opt_options) {\n\n    var options = opt_options || /** @type {Options} */ ({});\n\n    TileImage.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tileUrlFunction: tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.setKey(this.getKeyForParams_());\n  }\n\n  if ( TileImage ) TileArcGISRest.__proto__ = TileImage;\n  TileArcGISRest.prototype = Object.create( TileImage && TileImage.prototype );\n  TileArcGISRest.prototype.constructor = TileArcGISRest;\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  TileArcGISRest.prototype.getKeyForParams_ = function getKeyForParams_ () {\n    var i = 0;\n    var res = [];\n    for (var key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  };\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  TileArcGISRest.prototype.getParams = function getParams () {\n    return this.params_;\n  };\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  TileArcGISRest.prototype.getRequestUrl_ = function getRequestUrl_ (tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n\n    var urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    var srid = projection.getCode().split(':').pop();\n\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n    params['BBOX'] = tileExtent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(\n      params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio\n    );\n\n    var url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      var index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    var modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    return appendParams(modifiedUrl, params);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileArcGISRest.prototype.getTilePixelRatio = function getTilePixelRatio (pixelRatio) {\n    return /** @type {number} */ (pixelRatio);\n  };\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  TileArcGISRest.prototype.updateParams = function updateParams (params) {\n    assign(this.params_, params);\n    this.setKey(this.getKeyForParams_());\n  };\n\n  return TileArcGISRest;\n}(TileImage));\n\n/**\n * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n * @param {number} pixelRatio The pixel ratio\n * @param {import(\"../proj/Projection.js\").default} projection The projection\n * @return {string|undefined} The tile URL\n * @this {TileArcGISRest}\n */\nfunction tileUrlFunction(tileCoord, pixelRatio, projection) {\n\n  var tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projection);\n  }\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  var tileExtent = tileGrid.getTileCoordExtent(\n    tileCoord, this.tmpExtent_);\n  var tileSize = toSize(\n    tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n  if (pixelRatio != 1) {\n    tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n  }\n\n  // Apply default params and override with user specified values.\n  var baseParams = {\n    'F': 'image',\n    'FORMAT': 'PNG32',\n    'TRANSPARENT': true\n  };\n  assign(baseParams, this.params_);\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    pixelRatio, projection, baseParams);\n}\n\n\nexport default TileArcGISRest;\n\n//# sourceMappingURL=TileArcGISRest.js.map","<template>\n  <div>\n    <Button @click=\"addTileLayer\">添加TileLayer</Button>\n    <div id=\"map\" :class=\"$style['map']\"></div>\n  </div>\n</template>\n<script>\nimport Map from \"ol/Map.js\";\nimport View from \"ol/View.js\";\nimport Overlay from \"ol/Overlay.js\";\nimport TileLayer from \"ol/layer/Tile\";\nimport { OSM, TileArcGISRest } from \"ol/source\";\n\nexport default {\n  name: \"TileLayer\",\n  data() {\n    return {\n      map: null\n    };\n  },\n  mounted() {\n    this.initMap();\n  },\n  methods: {\n    initMap() {\n      this.map = new Map({\n        layers: [\n          new TileLayer({\n            source: new OSM()\n          })\n        ],\n        target: \"map\",\n        view: new View({\n          center: [-10997148, 4569099],\n          zoom: 4\n        })\n      });\n    },\n    addTileLayer() {\n      let url =\n        \"https://sampleserver1.arcgisonline.com/ArcGIS/rest/services/\" +\n        \"Specialty/ESRI_StateCityHighway_USA/MapServer\";\n      let layer = [\n        new TileLayer({\n          source: new OSM()\n        }),\n        new TileLayer({\n          extent: [-13884991, 2870341, -7455066, 6338219],\n          source: new TileArcGISRest({\n            url: url\n          })\n        })\n      ];\n      this.map.addLayer(layer);\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" module>\n.map {\n  width: 100%;\n  height: 500px;\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TileLayer.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TileLayer.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TileLayer.vue?vue&type=template&id=4adc10db&\"\nimport script from \"./TileLayer.vue?vue&type=script&lang=js&\"\nexport * from \"./TileLayer.vue?vue&type=script&lang=js&\"\nimport style0 from \"./TileLayer.vue?vue&type=style&index=0&lang=less&module=true&\"\n\n\n\n\nfunction injectStyles (context) {\n  \n  this[\"$style\"] = (style0.locals || style0)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}