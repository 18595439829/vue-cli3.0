{"version":3,"sources":["webpack:///./node_modules/uuid/index.js","webpack:///./src/views/ol/DrawMap.vue?6222","webpack:///./src/views/ol/js/draw.js","webpack:///src/views/ol/DrawMap.vue","webpack:///./src/views/ol/DrawMap.vue?51f6","webpack:///./src/views/ol/DrawMap.vue","webpack:///./node_modules/uuid/lib/bytesToUuid.js","webpack:///./src/views/ol/DrawMap.vue?dd69","webpack:///./src/views/ol/DrawMap.vue?c2d0","webpack:///./node_modules/ol/geom/Circle.js","webpack:///./node_modules/ol/interaction/Draw.js","webpack:///./node_modules/uuid/v1.js","webpack:///./node_modules/uuid/v4.js","webpack:///./node_modules/uuid/lib/rng-browser.js"],"names":["v1","__webpack_require__","v4","uuid","module","exports","render","_vm","this","_h","$createElement","_c","_self","class","$style","attrs","id","on","click","addDraw","_v","removeDraw","getDrawPx","clearDraw","_s","obj","arr","constructor","Array","staticRenderFns","DrawLayer","_this","Object","classCallCheck","raster","TileLayer","source","OSM","feature","VectorSource","wrapX","drawLayer","VectorLayer","map","Map","layers","target","view","View","center","fromLonLat","zoom","e","console","log","draw","getActive","remove","_this2","clear","Draw","type","freehand","addInteraction","removeInteraction","getSource","removeFeature","polygon","getGeometry","extent","getExtent","DrawMapvue_type_script_lang_js_","name","data","mounted","initMap","methods","draw_DrawLayer","add","px","get","ol_DrawMapvue_type_script_lang_js_","injectStyles","context","DrawMapvue_type_style_index_0_lang_less_module_true_","locals","component","componentNormalizer","__webpack_exports__","byteToHex","i","toString","substr","bytesToUuid","buf","offset","bth","join","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_0_0_node_modules_css_loader_index_js_ref_10_oneOf_0_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_0_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_0_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_DrawMap_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_0_0_node_modules_css_loader_index_js_ref_10_oneOf_0_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_0_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_0_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_DrawMap_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0___default","n","Circle_Circle","SimpleGeometry","Circle","opt_radius","opt_layout","call","undefined","setFlatCoordinates","radius","setCenterAndRadius","__proto__","prototype","create","clone","flatCoordinates","slice","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","dx","dy","squaredDistance","stride","delta","getRadius","Math","sqrt","i$1","length","containsXY","getRadiusSquared_","getCenter","computeExtent","ol_extent","getType","GeometryType","CIRCLE","intersectsExtent","circleExtent","intersectsCoordinate","setCenter","changed","setLayout","deflate","ii","getCoordinates","setCoordinates","coordinates","setRadius","geom_SimpleGeometry","transform","geom_Circle","Mode","POINT","LINE_STRING","POLYGON","DrawEventType","DRAWSTART","DRAWEND","DrawEvent","Event","Draw_Draw","PointerInteraction","options","pointerOptions","stopDown","functions","shouldHandle_","downPx_","downTimeout_","lastDragTime_","freehand_","source_","features_","features","snapTolerance_","snapTolerance","type_","mode_","getMode","stopClick_","stopClick","minPoints_","minPoints","maxPoints_","maxPoints","Infinity","finishCondition_","finishCondition","geometryFunction","opt_geometry","circle","NaN","squaredLength","ol_coordinate","Constructor","mode","Point","LineString","Polygon","geometry","concat","geometryFunction_","dragVertexDelay_","dragVertexDelay","finishCoordinate_","sketchFeature_","sketchPoint_","sketchCoords_","sketchLine_","sketchLineCoords_","squaredClickTolerance_","clickTolerance","overlay_","Vector","source_Vector","useSpatialIndex","style","getDefaultStyleFunction","updateWhileInteracting","geometryName_","geometryName","condition_","condition","freehandCondition_","freehandCondition","events","ol_Object","Property","ACTIVE","updateState_","setMap","getOverlay","handleEvent","event","originalEvent","EventType","CONTEXTMENU","preventDefault","move","MapBrowserEventType","POINTERMOVE","pass","POINTERDRAG","now","Date","pixel","clearTimeout","addToDrawing_","POINTERDOWN","handlePointerMove_","pointerEvent","pointerType","MouseSource","DBLCLICK","handleDownEvent","startDrawing_","setTimeout","MapBrowserPointerEvent","frameState","bind","handleUpEvent","circleMode","finishDrawing","atFinish_","abortDrawing_","stopPropagation","downPx","clickPx","modifyDrawing_","createOrUpdateSketchPoint_","at","potentiallyDone","potentiallyFinishCoordinates","sketchCoords","finishCoordinate","finishPixel","getPixelFromCoordinate","coordinate","sketchPointGeom","Feature","updateSketchFeatures_","start","setGeometryName","setGeometry","dispatchEvent","last","sketchLineGeom","ring","getLinearRing","getLayout","getFlatCoordinates","done","pop","push","removeLastPoint","splice","sketchFeature","MULTI_POINT","MultiPoint","MULTI_LINE_STRING","MultiLineString","MULTI_POLYGON","MultiPolygon","addFeature","extend","lineString","sketchFeatures","overlaySource","addFeatures","getMap","active","Pointer","styles","Style","resolution","_nodeId","_clockseq","rng","_lastMSecs","_lastNSecs","b","node","clockseq","seedBytes","msecs","getTime","nsecs","dt","Error","tl","tmh","rnds","random","getRandomValues","crypto","window","msCrypto","rnds8","Uint8Array","r"],"mappings":"qGAAA,IAAAA,EAASC,EAAQ,QACjBC,EAASD,EAAQ,QAEjBE,EAAAD,EACAC,EAAAH,KACAG,EAAAD,KAEAE,EAAAC,QAAAF,4CCPA,IAAAG,EAAA,WAA0B,IAAAC,EAAAC,KAAaC,EAAAF,EAAAG,eAA0BC,EAAAJ,EAAAK,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAAA,EAAA,OAA2BE,MAAAN,EAAAO,OAAA,OAAAC,MAAA,CAA+BC,GAAA,SAAYL,EAAA,UAAeM,GAAA,CAAIC,MAAAX,EAAAY,UAAqB,CAAAZ,EAAAa,GAAA,YAAAT,EAAA,UAAkCM,GAAA,CAAIC,MAAAX,EAAAc,aAAwB,CAAAd,EAAAa,GAAA,YAAAT,EAAA,UAAkCM,GAAA,CAAIC,MAAAX,EAAAe,YAAuB,CAAAf,EAAAa,GAAA,cAAAT,EAAA,UAAoCM,GAAA,CAAIC,MAAAX,EAAAgB,YAAuB,CAAAhB,EAAAa,GAAA,iBAAAb,EAAAa,GAAA,OAAAb,EAAAiB,GAAAjB,EAAAkB,IAAAC,IAAAC,cAAAC,OAAA,WACjYC,EAAA,4JCUqBC,aACnB,SAAAA,IAAc,IAAAC,EAAAvB,KAAAwB,OAAAC,EAAA,KAAAD,CAAAxB,KAAAsB,GAEZ,IAAMI,EAAS,IAAIC,OAAU,CAC3BC,OAAQ,IAAIC,SAEd7B,KAAK8B,QAAU,KACf9B,KAAK4B,OAAS,IAAIG,OAAa,CAAEC,OAAO,IAExChC,KAAKiC,UAAY,IAAIC,OAAY,CAC/BN,OAAQ5B,KAAK4B,SAYf5B,KAAKmC,IAAM,IAAIC,OAAI,CACjBC,OAAQ,CAACX,EAAQ1B,KAAKiC,WACtBK,OAAQ,MACRC,KAAM,IAAIC,OAAK,CACbC,OAAQC,eAAW,CAAC,mBAAoB,oBACxCC,KAAM,OAGV3C,KAAKmC,IAAI1B,GAAG,WAAY,SAACmC,GACrBC,QAAQC,IAAI,QAASF,GACjBrB,EAAKwB,KAAKC,aACZzB,EAAK0B,gEAIP,IAAAC,EAAAlD,KACJA,KAAKmD,QACLnD,KAAK+C,KAAO,IAAIK,OAAK,CACnB5C,GAAIb,MACJiC,OAAQ5B,KAAK4B,OACbyB,KAAM,UAWNC,UAAU,IAGZtD,KAAK+C,KAAKtC,GAAG,UAAW,SAACmC,GACvBC,QAAQC,IAAI,MAAOF,GACnBM,EAAKpB,QAAUc,EAAEd,QACjBoB,EAAKD,WAEPjD,KAAKmC,IAAIoB,eAAevD,KAAK+C,uCAG7B/C,KAAKmC,IAAIqB,kBAAkBxD,KAAK+C,sCAG3B/C,KAAK+C,MAAS/C,KAAK8B,UAGxB9B,KAAKiC,UAAUwB,YAAYC,cAAc1D,KAAK8B,SAC9C9B,KAAK8B,QAAU,oCAKf,IAAK9B,KAAK8B,QACR,OAAO,KAET,IAAM6B,EAAU3D,KAAK8B,QAAQ8B,cAC7Bf,QAAQC,IAAI,UAAWa,GACvB,IAAME,EAASF,EAAQG,YACvB,OAAOD,WChFXE,EAAA,CACAC,KAAA,UACAC,KAFA,WAGA,OACAlB,KAAA,KACA9B,IAAA,CACAC,IAAA,CACA,CACA8C,KAAA,SAMAE,QAdA,WAeAlE,KAAAmE,WAEAC,QAAA,CACAD,QADA,WAEAnE,KAAA+C,KAAA,IAAAsB,GAEA1D,QAJA,WAKAX,KAAA+C,KAAAuB,OAEAzD,WAPA,WAQAb,KAAA+C,KAAAE,UAEAlC,UAVA,WAWAf,KAAA+C,KAAAI,SAEArC,UAbA,WAcA,IAAAyD,EAAAvE,KAAA+C,KAAAyB,MACA3B,QAAAC,IAAA,KAAAyB,MC7CgWE,EAAA,0BCQhW,SAAAC,EAAAC,GAEA3E,KAAA,UAAoB4E,EAAA,WAAMC,QAAWD,EAAA,WAMrC,IAAAE,EAAgBtD,OAAAuD,EAAA,KAAAvD,CACdiD,EACA3E,EACAuB,GACF,EACAqD,EACA,KACA,MAIeM,EAAA,WAAAF,8BCtBf,IADA,IAAAG,EAAA,GACAC,EAAA,EAAeA,EAAA,MAASA,EACxBD,EAAAC,MAAA,KAAAC,SAAA,IAAAC,OAAA,GAGA,SAAAC,EAAAC,EAAAC,GACA,IAAAL,EAAAK,GAAA,EACAC,EAAAP,EAEA,OAAAO,EAAAF,EAAAJ,MAAAM,EAAAF,EAAAJ,MACAM,EAAAF,EAAAJ,MAAAM,EAAAF,EAAAJ,MAAA,IACAM,EAAAF,EAAAJ,MAAAM,EAAAF,EAAAJ,MAAA,IACAM,EAAAF,EAAAJ,MAAAM,EAAAF,EAAAJ,MAAA,IACAM,EAAAF,EAAAJ,MAAAM,EAAAF,EAAAJ,MAAA,IACAM,EAAAF,EAAAJ,MAAAM,EAAAF,EAAAJ,MACAM,EAAAF,EAAAJ,MAAAM,EAAAF,EAAAJ,MACAM,EAAAF,EAAAJ,MAAAM,EAAAF,EAAAJ,OAAAO,KAAA,IAGA7F,EAAAC,QAAAwF,wBCtBAzF,EAAAC,QAAA,CAAkBsC,IAAA,0DCDlB,IAAAuD,EAAAjG,EAAA,QAAAkG,EAAAlG,EAAAmG,EAAAF,GAA8iBV,EAAA,WAAAW,EAAG,0OCc7iBE,EAAM,SAAAC,GACV,SAAAC,EAAAtD,EAAAuD,EAAAC,GAEA,GADAH,EAAAI,KAAAlG,WACAmG,IAAAF,QAAAE,IAAAH,EACAhG,KAAAoG,mBAAAH,EAAAxD,OACK,CACL,IAAA4D,EAAAL,GAAA,EACAhG,KAAAsG,mBAAA7D,EAAA4D,EAAAJ,IA8LA,OA1LAH,IAAAC,EAAAQ,UAAAT,GACAC,EAAAS,UAAAhF,OAAAiF,OAAAX,KAAAU,WACAT,EAAAS,UAAArF,YAAA4E,EAQAA,EAAAS,UAAAE,MAAA,WACA,WAAAX,EAAA/F,KAAA2G,gBAAAC,aAAAT,EAAAnG,KAAA6G,SAMAd,EAAAS,UAAAM,eAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAP,EAAA3G,KAAA2G,gBACAQ,EAAAJ,EAAAJ,EAAA,GACAS,EAAAJ,EAAAL,EAAA,GACAU,EAAAF,IAAAC,IACA,GAAAC,EAAAH,EAAA,CACA,OAAAG,EACA,QAAAnC,EAAA,EAAuBA,EAAAlF,KAAAsH,SAAiBpC,EACxC+B,EAAA/B,GAAAyB,EAAAzB,OAEO,CACP,IAAAqC,EAAAvH,KAAAwH,YAAAC,KAAAC,KAAAL,GACAJ,EAAA,GAAAN,EAAA,GAAAY,EAAAJ,EACAF,EAAA,GAAAN,EAAA,GAAAY,EAAAH,EACA,QAAAO,EAAA,EAAyBA,EAAA3H,KAAAsH,SAAmBK,EAC5CV,EAAAU,GAAAhB,EAAAgB,GAIA,OADAV,EAAAW,OAAA5H,KAAAsH,OACAD,EAEA,OAAAH,GAOAnB,EAAAS,UAAAqB,WAAA,SAAAd,EAAAC,GACA,IAAAL,EAAA3G,KAAA2G,gBACAQ,EAAAJ,EAAAJ,EAAA,GACAS,EAAAJ,EAAAL,EAAA,GACA,OAAAQ,IAAAC,KAAApH,KAAA8H,qBAQA/B,EAAAS,UAAAuB,UAAA,WACA,OAAA/H,KAAA2G,gBAAAC,MAAA,EAAA5G,KAAAsH,SAMAvB,EAAAS,UAAAwB,cAAA,SAAAnE,GACA,IAAA8C,EAAA3G,KAAA2G,gBACAN,EAAAM,EAAA3G,KAAAsH,QAAAX,EAAA,GACA,OAAWnF,OAAAyG,EAAA,KAAAzG,CACXmF,EAAA,GAAAN,EAAAM,EAAA,GAAAN,EACAM,EAAA,GAAAN,EAAAM,EAAA,GAAAN,EACAxC,IAQAkC,EAAAS,UAAAgB,UAAA,WACA,OAAAC,KAAAC,KAAA1H,KAAA8H,sBAOA/B,EAAAS,UAAAsB,kBAAA,WACA,IAAAX,EAAAnH,KAAA2G,gBAAA3G,KAAAsH,QAAAtH,KAAA2G,gBAAA,GACAS,EAAApH,KAAA2G,gBAAA3G,KAAAsH,OAAA,GAAAtH,KAAA2G,gBAAA,GACA,OAAAQ,IAAAC,KAOArB,EAAAS,UAAA0B,QAAA,WACA,OAAWC,EAAA,KAAYC,QAOvBrC,EAAAS,UAAA6B,iBAAA,SAAAxE,GACA,IAAAyE,EAAAtI,KAAA8D,YACA,GAAQtC,OAAAyG,EAAA,KAAAzG,CAAUqC,EAAAyE,GAAA,CAClB,IAAA7F,EAAAzC,KAAA+H,YAEA,OAAAlE,EAAA,IAAApB,EAAA,IAAAoB,EAAA,IAAApB,EAAA,KAGAoB,EAAA,IAAApB,EAAA,IAAAoB,EAAA,IAAApB,EAAA,IAIajB,OAAAyG,EAAA,KAAAzG,CAAaqC,EAAA7D,KAAAuI,qBAAAvI,OAE1B,UASA+F,EAAAS,UAAAgC,UAAA,SAAA/F,GACA,IAAA6E,EAAAtH,KAAAsH,OACAjB,EAAArG,KAAA2G,gBAAAW,GAAAtH,KAAA2G,gBAAA,GACAA,EAAAlE,EAAAmE,QACAD,EAAAW,GAAAX,EAAA,GAAAN,EACA,QAAAnB,EAAA,EAAmBA,EAAAoC,IAAYpC,EAC/ByB,EAAAW,EAAApC,GAAAzC,EAAAyC,GAEAlF,KAAAoG,mBAAApG,KAAA6G,OAAAF,GACA3G,KAAAyI,WAWA1C,EAAAS,UAAAF,mBAAA,SAAA7D,EAAA4D,EAAAJ,GACAjG,KAAA0I,UAAAzC,EAAAxD,EAAA,GACAzC,KAAA2G,kBACA3G,KAAA2G,gBAAA,IAGA,IAAAA,EAAA3G,KAAA2G,gBACApB,EAAiB/D,OAAAmH,EAAA,KAAAnH,CACjBmF,EAAA,EAAAlE,EAAAzC,KAAAsH,QACAX,EAAApB,KAAAoB,EAAA,GAAAN,EACA,QAAAnB,EAAA,EAAA0D,EAAA5I,KAAAsH,OAAqCpC,EAAA0D,IAAQ1D,EAC7CyB,EAAApB,KAAAoB,EAAAzB,GAEAyB,EAAAiB,OAAArC,EACAvF,KAAAyI,WAMA1C,EAAAS,UAAAqC,eAAA,WACA,aAMA9C,EAAAS,UAAAsC,eAAA,SAAAC,EAAA9C,KAOAF,EAAAS,UAAAwC,UAAA,SAAA3C,GACArG,KAAA2G,gBAAA3G,KAAAsH,QAAAtH,KAAA2G,gBAAA,GAAAN,EACArG,KAAAyI,WAGA1C,EArMU,CAsMRkD,EAAA,MAyBFpD,EAAMW,UAAA0C,UACS,IAAAC,EAAA,kJCpHfC,EAAA,CACAC,MAAA,QACAC,YAAA,aACAC,QAAA,UACAnB,OAAA,UAOAoB,EAAA,CAMAC,UAAA,YAMAC,QAAA,WASAC,EAAA,SAAAC,GACA,SAAAD,EAAAtG,EAAAvB,GAEA8H,EAAA1D,KAAAlG,KAAAqD,GAOArD,KAAA8B,UAQA,OAJA8H,IAAAD,EAAApD,UAAAqD,GACAD,EAAAnD,UAAAhF,OAAAiF,OAAAmD,KAAApD,WACAmD,EAAAnD,UAAArF,YAAAwI,EAEAA,EAlBA,CAmBEC,EAAA,MAUEC,EAAI,SAAAC,GACR,SAAA1G,EAAA2G,GAEA,IAAAC,EAAmE,EACnEA,EAAAC,WACAD,EAAAC,SAAgCC,EAAA,MAGhCJ,EAAA5D,KAAAlG,KAAAgK,GAMAhK,KAAAmK,eAAA,EAMAnK,KAAAoK,QAAA,KAMApK,KAAAqK,aAMArK,KAAAsK,cAMAtK,KAAAuK,WAAA,EAOAvK,KAAAwK,QAAAT,EAAAnI,OAAAmI,EAAAnI,OAAA,KAOA5B,KAAAyK,UAAAV,EAAAW,SAAAX,EAAAW,SAAA,KAOA1K,KAAA2K,eAAAZ,EAAAa,cAAAb,EAAAa,cAAA,GAOA5K,KAAA6K,MAAyCd,EAAA,KAOzC/J,KAAA8K,MAAAC,EAAA/K,KAAA6K,OAQA7K,KAAAgL,aAAAjB,EAAAkB,UASAjL,KAAAkL,WAAAnB,EAAAoB,UACApB,EAAAoB,UACAnL,KAAA8K,QAAA1B,EAAAG,QAAA,IAQAvJ,KAAAoL,WAAArB,EAAAsB,UAAAtB,EAAAsB,UAAAC,IAOAtL,KAAAuL,iBAAAxB,EAAAyB,gBAAAzB,EAAAyB,gBAAgFtB,EAAA,KAEhF,IAAAuB,EAAA1B,EAAA0B,iBACA,IAAAA,EACA,GAAAzL,KAAA6K,QAAyB1C,EAAA,KAAYC,OAMrCqD,EAAA,SAAA1C,EAAA2C,GACA,IAAAC,EAAAD,GACA,IAAgBvC,EAAM,CAAAyC,UACtBC,EAA8BrK,OAAAsK,EAAA,KAAAtK,CAC9BuH,EAAA,GAAAA,EAAA,IAEA,OADA4C,EAAArF,mBAAAyC,EAAA,GAAAtB,KAAAC,KAAAmE,IACAF,OAEO,CACP,IAAAI,EACAC,EAAAhM,KAAA8K,MACAkB,IAAA5C,EAAAC,MACA0C,EAAwBE,EAAA,KACfD,IAAA5C,EAAAE,YACTyC,EAAwBG,EAAA,KACfF,IAAA5C,EAAAG,UACTwC,EAAwBI,EAAA,MAOxBV,EAAA,SAAA1C,EAAA2C,GACA,IAAAU,EAAAV,EAeA,OAdAU,EACAJ,IAAA5C,EAAAG,QACAR,EAAA,GAAAnB,OAEAwE,EAAAtD,eAAA,CAAAC,EAAA,GAAAsD,OAAA,CAAAtD,EAAA,UAEAqD,EAAAtD,eAAA,IAGAsD,EAAAtD,eAAAC,GAGAqD,EAAA,IAAAL,EAAAhD,GAEAqD,GASApM,KAAAsM,kBAAAb,EAMAzL,KAAAuM,sBAAApG,IAAA4D,EAAAyC,gBAAAzC,EAAAyC,gBAAA,IAQAxM,KAAAyM,kBAAA,KAOAzM,KAAA0M,eAAA,KAOA1M,KAAA2M,aAAA,KAOA3M,KAAA4M,cAAA,KAOA5M,KAAA6M,YAAA,KAOA7M,KAAA8M,kBAAA,KASA9M,KAAA+M,uBAAAhD,EAAAiD,eACAjD,EAAAiD,eAAAjD,EAAAiD,eAAA,GAOAhN,KAAAiN,SAAA,IAAwBC,EAAA,KAAW,CACnCtL,OAAA,IAAkBuL,EAAA,KAAY,CAC9BC,iBAAA,EACApL,QAAA+H,EAAA/H,OAAA+H,EAAA/H,QAEAqL,MAAAtD,EAAAsD,MAAAtD,EAAAsD,MACAC,IACAC,wBAAA,IAQAvN,KAAAwN,cAAAzD,EAAA0D,aAMAzN,KAAA0N,WAAA3D,EAAA4D,UAAA5D,EAAA4D,UAA8DA,EAAA,KAM9D3N,KAAA4N,mBACA7D,EAAAzG,SACAtD,KAAA4N,mBAAgCD,EAAA,KAEhC3N,KAAA4N,mBAAA7D,EAAA8D,kBACA9D,EAAA8D,kBAAoCF,EAAA,KAGhCnM,OAAAsM,EAAA,KAAAtM,CAAMxB,KACJwB,OAAAuM,EAAA,KAAAvM,CAAmBwM,EAAA,KAAmBC,QAC5CjO,KAAAkO,aAAAlO,MAmfA,OA/eA8J,IAAA1G,EAAAmD,UAAAuD,GACA1G,EAAAoD,UAAAhF,OAAAiF,OAAAqD,KAAAtD,WACApD,EAAAoD,UAAArF,YAAAiC,EAKAA,EAAAoD,UAAA2H,OAAA,SAAAhM,GACA2H,EAAAtD,UAAA2H,OAAAjI,KAAAlG,KAAAmC,GACAnC,KAAAkO,gBAQA9K,EAAAoD,UAAA4H,WAAA,WACA,OAAApO,KAAAiN,UAQA7J,EAAAoD,UAAA6H,YAAA,SAAAC,GACAA,EAAAC,cAAAlL,OAAqCmL,EAAA,KAASC,aAE9CH,EAAAI,iBAEA1O,KAAAuK,UAAAvK,KAAA8K,QAAA1B,EAAAC,OAAArJ,KAAA4N,mBAAAU,GACA,IAAAK,EAAAL,EAAAjL,OAA8BuL,EAAA,KAAmBC,YACjDC,GAAA,EACA,IAAA9O,KAAAuK,WAAAvK,KAAAsK,eAAAgE,EAAAjL,OAAgEuL,EAAA,KAAmBG,YAAA,CACnF,IAAAC,EAAAC,KAAAD,MACAA,EAAAhP,KAAAsK,eAAAtK,KAAAuM,kBACAvM,KAAAoK,QAAAkE,EAAAY,MACAlP,KAAAmK,eAAAnK,KAAAuK,UACAoE,GAAA,GAEA3O,KAAAsK,mBAAAnE,EAEAnG,KAAAmK,oBAAAhE,IAAAnG,KAAAqK,eACA8E,aAAAnP,KAAAqK,cACArK,KAAAqK,kBAAAlE,GAuBA,OApBAnG,KAAAuK,WACA+D,EAAAjL,OAAuBuL,EAAA,KAAmBG,aAC1C,OAAA/O,KAAA0M,gBACA1M,KAAAoP,cAAAd,GACAQ,GAAA,GACK9O,KAAAuK,WACL+D,EAAAjL,OAAuBuL,EAAA,KAAmBS,YAC1CP,GAAA,EACKH,GACLG,EAAAR,EAAAjL,OAA4BuL,EAAA,KAAmBC,YAC/CC,GAAA9O,KAAAuK,UACAuE,EAAA9O,KAAAsP,mBAAAhB,IACmD,EAAAiB,aAAAC,aAAwCC,EAAA,MAC3FnB,EAAAjL,OAA0BuL,EAAA,KAAmBG,kBAAA5I,IAAAnG,KAAAqK,eAC7CrK,KAAAsP,mBAAAhB,IAEKA,EAAAjL,OAAyBuL,EAAA,KAAmBc,WACjDZ,GAAA,GAGAhF,EAAAtD,UAAA6H,YAAAnI,KAAAlG,KAAAsO,IAAAQ,GAMA1L,EAAAoD,UAAAmJ,gBAAA,SAAArB,GAGA,OAFAtO,KAAAmK,eAAAnK,KAAAuK,UAEAvK,KAAAuK,WACAvK,KAAAoK,QAAAkE,EAAAY,MACAlP,KAAAyM,mBACAzM,KAAA4P,cAAAtB,IAEA,KACKtO,KAAA0N,WAAAY,KACLtO,KAAAsK,cAAA2E,KAAAD,MACAhP,KAAAqK,aAAAwF,WAAA,WACA7P,KAAAsP,mBAAA,IAAoCQ,EAAA,KAC1BlB,EAAA,KAAmBC,YAAAP,EAAAnM,IAAAmM,EAAAiB,cAAA,EAAAjB,EAAAyB,cACtBC,KAAAhQ,WAAAuM,kBACPvM,KAAAoK,QAAAkE,EAAAY,OACA,IAUA9L,EAAAoD,UAAAyJ,cAAA,SAAA3B,GACA,IAAAQ,GAAA,EAEA9O,KAAAqK,eACA8E,aAAAnP,KAAAqK,cACArK,KAAAqK,kBAAAlE,GAGAnG,KAAAsP,mBAAAhB,GAEA,IAAA4B,EAAAlQ,KAAA8K,QAAA1B,EAAAhB,OAyBA,OAvBApI,KAAAmK,eACAnK,KAAAyM,kBAKOzM,KAAAuK,WAAA2F,EACPlQ,KAAAmQ,gBACOnQ,KAAAoQ,UAAA9B,GACPtO,KAAAuL,iBAAA+C,IACAtO,KAAAmQ,gBAGAnQ,KAAAoP,cAAAd,IAXAtO,KAAA4P,cAAAtB,GACAtO,KAAA8K,QAAA1B,EAAAC,OACArJ,KAAAmQ,iBAWArB,GAAA,GACK9O,KAAAuK,YACLvK,KAAAyM,kBAAA,KACAzM,KAAAqQ,kBAEAvB,GAAA9O,KAAAgL,YACAsD,EAAAgC,kBAEAxB,GASA1L,EAAAoD,UAAA8I,mBAAA,SAAAhB,GACA,GAAAtO,KAAAoK,WACApK,KAAAuK,WAAAvK,KAAAmK,eACAnK,KAAAuK,YAAAvK,KAAAmK,eAAA,CACA,IAAAoG,EAAAvQ,KAAAoK,QACAoG,EAAAlC,EAAAY,MACA/H,EAAAoJ,EAAA,GAAAC,EAAA,GACApJ,EAAAmJ,EAAA,GAAAC,EAAA,GACAnJ,EAAAF,IAAAC,IAIA,GAHApH,KAAAmK,cAAAnK,KAAAuK,UACAlD,EAAArH,KAAA+M,uBACA1F,GAAArH,KAAA+M,wBACA/M,KAAAmK,cACA,SASA,OALAnK,KAAAyM,kBACAzM,KAAAyQ,eAAAnC,GAEAtO,KAAA0Q,2BAAApC,IAEA,GASAlL,EAAAoD,UAAA4J,UAAA,SAAA9B,GACA,IAAAqC,GAAA,EACA,GAAA3Q,KAAA0M,eAAA,CACA,IAAAkE,GAAA,EACAC,EAAA,CAAA7Q,KAAAyM,mBACA,GAAAzM,KAAA8K,QAAA1B,EAAAE,YACAsH,EAAA5Q,KAAA4M,cAAAhF,OAAA5H,KAAAkL,gBACO,GAAAlL,KAAA8K,QAAA1B,EAAAG,QAAA,CACP,IAAAuH,EAAoD9Q,KAAA,cACpD4Q,EAAAE,EAAA,GAAAlJ,OAAA5H,KAAAkL,WACA2F,EAAA,CAAAC,EAAA,MAAAA,EAAA,GAAAA,EAAA,GAAAlJ,OAAA,IAEA,GAAAgJ,EAEA,IADA,IAAAzO,EAAAmM,EAAAnM,IACA+C,EAAA,EAAA0D,EAAAiI,EAAAjJ,OAAiE1C,EAAA0D,EAAQ1D,IAAA,CACzE,IAAA6L,EAAAF,EAAA3L,GACA8L,EAAA7O,EAAA8O,uBAAAF,GACA7B,EAAAZ,EAAAY,MACA/H,EAAA+H,EAAA,GAAA8B,EAAA,GACA5J,EAAA8H,EAAA,GAAA8B,EAAA,GACApG,EAAA5K,KAAAuK,UAAA,EAAAvK,KAAA2K,eAEA,GADAgG,EAAAlJ,KAAAC,KAAAP,IAAAC,MAAAwD,EACA+F,EAAA,CACA3Q,KAAAyM,kBAAAsE,EACA,QAKA,OAAAJ,GAOAvN,EAAAoD,UAAAkK,2BAAA,SAAApC,GACA,IAAAvF,EAAAuF,EAAA4C,WAAAtK,QACA,GAAA5G,KAAA2M,aAGK,CACL,IAAAwE,EAA6CnR,KAAA2M,aAAA/I,cAC7CuN,EAAArI,eAAAC,QAJA/I,KAAA2M,aAAA,IAA8ByE,EAAA,KAAO,IAAKnF,EAAA,KAAKlD,IAC/C/I,KAAAqR,yBAYAjO,EAAAoD,UAAAoJ,cAAA,SAAAtB,GACA,IAAAgD,EAAAhD,EAAA4C,WACAlR,KAAAyM,kBAAA6E,EACAtR,KAAA8K,QAAA1B,EAAAC,MACArJ,KAAA4M,cAAA0E,EAAA1K,QACK5G,KAAA8K,QAAA1B,EAAAG,SACLvJ,KAAA4M,cAAA,EAAA0E,EAAA1K,QAAA0K,EAAA1K,UACA5G,KAAA8M,kBAAA9M,KAAA4M,cAAA,IAEA5M,KAAA4M,cAAA,CAAA0E,EAAA1K,QAAA0K,EAAA1K,SAEA5G,KAAA8M,oBACA9M,KAAA6M,YAAA,IAA6BuE,EAAA,KAC7B,IAAYlF,EAAA,KAAUlM,KAAA8M,qBAEtB,IAAAV,EAAApM,KAAAsM,kBAAAtM,KAAA4M,eACA5M,KAAA0M,eAAA,IAA8B0E,EAAA,KAC9BpR,KAAAwN,eACAxN,KAAA0M,eAAA6E,gBAAAvR,KAAAwN,eAEAxN,KAAA0M,eAAA8E,YAAApF,GACApM,KAAAqR,wBACArR,KAAAyR,cAAA,IAAA9H,EAAAH,EAAAC,UAAAzJ,KAAA0M,kBAQAtJ,EAAAoD,UAAAiK,eAAA,SAAAnC,GACA,IAEAvF,EAAA2I,EAsBAC,EAxBAT,EAAA5C,EAAA4C,WACA9E,EAA0EpM,KAAA0M,eAAA9I,cAkB1E,GAhBA5D,KAAA8K,QAAA1B,EAAAC,MACAqI,EAAA1R,KAAA4M,cACK5M,KAAA8K,QAAA1B,EAAAG,SACLR,EAA6C/I,KAAA,iBAC7C0R,EAAA3I,IAAAnB,OAAA,GACA5H,KAAAoQ,UAAA9B,KAEA4C,EAAAlR,KAAAyM,kBAAA7F,WAGAmC,EAAA/I,KAAA4M,cACA8E,EAAA3I,IAAAnB,OAAA,IAEA8J,EAAA,GAAAR,EAAA,GACAQ,EAAA,GAAAR,EAAA,GACAlR,KAAAsM,kBAAqDtM,KAAA,cAAAoM,GACrDpM,KAAA2M,aAAA,CACA,IAAAwE,EAA6CnR,KAAA2M,aAAA/I,cAC7CuN,EAAArI,eAAAoI,GAIA,GAAA9E,EAAAlE,WAA8BC,EAAA,KAAYoB,SAC1CvJ,KAAA8K,QAAA1B,EAAAG,QAAA,CACAvJ,KAAA6M,cACA7M,KAAA6M,YAAA,IAA+BuE,EAAA,MAE/B,IAAAQ,EAAoC,EAAAC,cAAA,GACpCF,EAA6C3R,KAAA6M,YAAAjJ,cAC7C+N,GAIAA,EAAAvL,mBACAwL,EAAAE,YAAAF,EAAAG,sBACAJ,EAAAlJ,YALAkJ,EAAA,IAA6BzF,EAAA,KAAU0F,EAAAG,qBAAAH,EAAAE,aACvC9R,KAAA6M,YAAA2E,YAAAG,SAMK3R,KAAA8M,oBACL6E,EAA6C3R,KAAA6M,YAAAjJ,cAC7C+N,EAAA7I,eAAA9I,KAAA8M,oBAEA9M,KAAAqR,yBAQAjO,EAAAoD,UAAA4I,cAAA,SAAAd,GACA,IAEA0D,EACAjJ,EAHAmI,EAAA5C,EAAA4C,WACA9E,EAA0EpM,KAAA0M,eAAA9I,cAG1E5D,KAAA8K,QAAA1B,EAAAE,aACAtJ,KAAAyM,kBAAAyE,EAAAtK,QACAmC,EAA6C/I,KAAA,cAC7C+I,EAAAnB,QAAA5H,KAAAoL,aACApL,KAAAuK,UACAxB,EAAAkJ,MAEAD,GAAA,GAGAjJ,EAAAmJ,KAAAhB,EAAAtK,SACA5G,KAAAsM,kBAAAvD,EAAAqD,IACKpM,KAAA8K,QAAA1B,EAAAG,UACLR,EAA6C/I,KAAA,iBAC7C+I,EAAAnB,QAAA5H,KAAAoL,aACApL,KAAAuK,UACAxB,EAAAkJ,MAEAD,GAAA,GAGAjJ,EAAAmJ,KAAAhB,EAAAtK,SACAoL,IACAhS,KAAAyM,kBAAA1D,EAAA,IAEA/I,KAAAsM,kBAAAtM,KAAA4M,cAAAR,IAEApM,KAAAqR,wBACAW,GACAhS,KAAAmQ,iBAQA/M,EAAAoD,UAAA2L,gBAAA,WACA,GAAAnS,KAAA0M,eAAA,CAGA,IACA3D,EAEA4I,EAHAvF,EAA0EpM,KAAA0M,eAAA9I,cAI1E5D,KAAA8K,QAAA1B,EAAAE,aACAP,EAA6C/I,KAAA,cAC7C+I,EAAAqJ,QAAA,KACApS,KAAAsM,kBAAAvD,EAAAqD,GACArD,EAAAnB,QAAA,IACA5H,KAAAyM,kBAAA1D,IAAAnB,OAAA,GAAAhB,UAEK5G,KAAA8K,QAAA1B,EAAAG,UACLR,EAA6C/I,KAAA,iBAC7C+I,EAAAqJ,QAAA,KACAT,EAA6C3R,KAAA6M,YAAAjJ,cAC7C+N,EAAA7I,eAAAC,GACA/I,KAAAsM,kBAAAtM,KAAA4M,cAAAR,IAGA,IAAArD,EAAAnB,SACA5H,KAAAyM,kBAAA,MAGAzM,KAAAqR,0BASAjO,EAAAoD,UAAA2J,cAAA,WACA,IAAAkC,EAAArS,KAAAqQ,gBACA,GAAAgC,EAAA,CAGA,IAAAtJ,EAAA/I,KAAA4M,cACAR,EAA0EiG,EAAAzO,cAC1E5D,KAAA8K,QAAA1B,EAAAE,aAEAP,EAAAkJ,MACAjS,KAAAsM,kBAAAvD,EAAAqD,IACKpM,KAAA8K,QAAA1B,EAAAG,UAE0B,KAAA0I,MAC/BjS,KAAAsM,kBAAAvD,EAAAqD,GACArD,EAAAqD,EAAAvD,kBAIA7I,KAAA6K,QAAuB1C,EAAA,KAAYmK,YACnCD,EAAAb,YAAA,IAAoCe,EAAA,KAAU,CAA4B,KACrEvS,KAAA6K,QAAyB1C,EAAA,KAAYqK,kBAC1CH,EAAAb,YAAA,IAAoCiB,EAAA,KAAe,CAA2B,KACzEzS,KAAA6K,QAAyB1C,EAAA,KAAYuK,eAC1CL,EAAAb,YAAA,IAAoCmB,EAAA,KAAY,CAA2B,KAI3E3S,KAAAyR,cAAA,IAAA9H,EAAAH,EAAAE,QAAA2I,IAGArS,KAAAyK,WACAzK,KAAAyK,UAAAyH,KAAAG,GAEArS,KAAAwK,SACAxK,KAAAwK,QAAAoI,WAAAP,KASAjP,EAAAoD,UAAA6J,cAAA,WACArQ,KAAAyM,kBAAA,KACA,IAAA4F,EAAArS,KAAA0M,eAOA,OANA2F,IACArS,KAAA0M,eAAA,KACA1M,KAAA2M,aAAA,KACA3M,KAAA6M,YAAA,KAC8B7M,KAAAiN,SAAAxJ,YAAAN,OAAA,IAE9BkP,GAUAjP,EAAAoD,UAAAqM,OAAA,SAAA/Q,GACA,IAAAsK,EAAAtK,EAAA8B,cACAkP,EAA2C,EAC3C9S,KAAA0M,eAAA5K,EACA9B,KAAA4M,cAAAkG,EAAAjK,iBACA,IAAA6I,EAAA1R,KAAA4M,cAAA5M,KAAA4M,cAAAhF,OAAA,GACA5H,KAAAyM,kBAAAiF,EAAA9K,QACA5G,KAAA4M,cAAAsF,KAAAR,EAAA9K,SACA5G,KAAAqR,wBACArR,KAAAyR,cAAA,IAAA9H,EAAAH,EAAAC,UAAAzJ,KAAA0M,kBAOAtJ,EAAAoD,UAAA6K,sBAAA,WACA,IAAA0B,EAAA,GACA/S,KAAA0M,gBACAqG,EAAAb,KAAAlS,KAAA0M,gBAEA1M,KAAA6M,aACAkG,EAAAb,KAAAlS,KAAA6M,aAEA7M,KAAA2M,cACAoG,EAAAb,KAAAlS,KAAA2M,cAEA,IAAAqG,EAAgDhT,KAAAiN,SAAAxJ,YAChDuP,EAAA7P,OAAA,GACA6P,EAAAC,YAAAF,IAMA3P,EAAAoD,UAAA0H,aAAA,WACA,IAAA/L,EAAAnC,KAAAkT,SACAC,EAAAnT,KAAAgD,YACAb,GAAAgR,GACAnT,KAAAqQ,gBAEArQ,KAAAiN,SAAAkB,OAAAgF,EAAAhR,EAAA,OAGAiB,EA/vBQ,CAgwBNgQ,EAAA,MAMF,SAAA9F,IACA,IAAA+F,EAAe7R,OAAA8R,EAAA,KAAA9R,GACf,gBAAAM,EAAAyR,GACA,OAAAF,EAAAvR,EAAA8B,cAAAsE,YA0EA,SAAA6C,EAAA1H,GACA,IAAA2I,EAaA,OAZA3I,IAAe8E,EAAA,KAAYkB,OAC3BhG,IAAe8E,EAAA,KAAYmK,YAC3BtG,EAAA5C,EAAAC,MACGhG,IAAmB8E,EAAA,KAAYmB,aAClCjG,IAAe8E,EAAA,KAAYqK,kBAC3BxG,EAAA5C,EAAAE,YACGjG,IAAmB8E,EAAA,KAAYoB,SAClClG,IAAe8E,EAAA,KAAYuK,cAC3B1G,EAAA5C,EAAAG,QACGlG,IAAmB8E,EAAA,KAAYC,SAClC4D,EAAA5C,EAAAhB,QAEA,EAMepD,EAAA,6BC9hCf,IAQAwO,EACAC,EATAC,EAAUjU,EAAQ,QAClB4F,EAAkB5F,EAAQ,QAW1BkU,EAAA,EACAC,EAAA,EAGA,SAAApU,EAAAuK,EAAAzE,EAAAC,GACA,IAAAL,EAAAI,GAAAC,GAAA,EACAsO,EAAAvO,GAAA,GAEAyE,KAAA,GACA,IAAA+J,EAAA/J,EAAA+J,MAAAN,EACAO,OAAA5N,IAAA4D,EAAAgK,SAAAhK,EAAAgK,SAAAN,EAKA,SAAAK,GAAA,MAAAC,EAAA,CACA,IAAAC,EAAAN,IACA,MAAAI,IAEAA,EAAAN,EAAA,CACA,EAAAQ,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAGA,MAAAD,IAEAA,EAAAN,EAAA,OAAAO,EAAA,MAAAA,EAAA,KAQA,IAAAC,OAAA9N,IAAA4D,EAAAkK,MAAAlK,EAAAkK,OAAA,IAAAhF,MAAAiF,UAIAC,OAAAhO,IAAA4D,EAAAoK,MAAApK,EAAAoK,MAAAP,EAAA,EAGAQ,EAAAH,EAAAN,GAAAQ,EAAAP,GAAA,IAcA,GAXAQ,EAAA,QAAAjO,IAAA4D,EAAAgK,WACAA,IAAA,UAKAK,EAAA,GAAAH,EAAAN,SAAAxN,IAAA4D,EAAAoK,QACAA,EAAA,GAIAA,GAAA,IACA,UAAAE,MAAA,mDAGAV,EAAAM,EACAL,EAAAO,EACAV,EAAAM,EAGAE,GAAA,YAGA,IAAAK,GAAA,eAAAL,GAAAE,GAAA,WACAN,EAAA3O,KAAAoP,IAAA,OACAT,EAAA3O,KAAAoP,IAAA,OACAT,EAAA3O,KAAAoP,IAAA,MACAT,EAAA3O,KAAA,IAAAoP,EAGA,IAAAC,EAAAN,EAAA,yBACAJ,EAAA3O,KAAAqP,IAAA,MACAV,EAAA3O,KAAA,IAAAqP,EAGAV,EAAA3O,KAAAqP,IAAA,SACAV,EAAA3O,KAAAqP,IAAA,OAGAV,EAAA3O,KAAA6O,IAAA,MAGAF,EAAA3O,KAAA,IAAA6O,EAGA,QAAAnO,EAAA,EAAiBA,EAAA,IAAOA,EACxBiO,EAAA3O,EAAAU,GAAAkO,EAAAlO,GAGA,OAAAN,GAAAD,EAAAwO,GAGAjU,EAAAC,QAAAL,wBC5GA,IAAAkU,EAAUjU,EAAQ,QAClB4F,EAAkB5F,EAAQ,QAE1B,SAAAC,EAAAqK,EAAAzE,EAAAC,GACA,IAAAL,EAAAI,GAAAC,GAAA,EAEA,qBACAD,EAAA,WAAAyE,EAAA,IAAA3I,MAAA,SACA2I,EAAA,MAEAA,KAAA,GAEA,IAAAyK,EAAAzK,EAAA0K,SAAA1K,EAAA2J,UAOA,GAJAc,EAAA,MAAAA,EAAA,MACAA,EAAA,MAAAA,EAAA,OAGAlP,EACA,QAAAsD,EAAA,EAAoBA,EAAA,KAASA,EAC7BtD,EAAAJ,EAAA0D,GAAA4L,EAAA5L,GAIA,OAAAtD,GAAAD,EAAAmP,GAGA5U,EAAAC,QAAAH,sBCrBA,IAAAgV,EAAA,4BAAAC,OAAAD,iBAAAC,OAAAD,gBAAA1E,KAAA2E,SACA,iDAAAC,OAAAC,SAAAH,iBAAAG,SAAAH,gBAAA1E,KAAA6E,UAEA,GAAAH,EAAA,CAEA,IAAAI,EAAA,IAAAC,WAAA,IAEAnV,EAAAC,QAAA,WAEA,OADA6U,EAAAI,GACAA,OAEC,CAKD,IAAAN,EAAA,IAAApT,MAAA,IAEAxB,EAAAC,QAAA,WACA,QAAAmV,EAAA9P,EAAA,EAAsBA,EAAA,GAAQA,IAC9B,OAAAA,KAAA8P,EAAA,WAAAvN,KAAAgN,UACAD,EAAAtP,GAAA8P,MAAA,EAAA9P,IAAA,OAGA,OAAAsP","file":"js/chunk-446e4c4c.86a4e86f.js","sourcesContent":["var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{class:_vm.$style['map'],attrs:{\"id\":\"map\"}}),_c('Button',{on:{\"click\":_vm.addDraw}},[_vm._v(\"添加画图功能\")]),_c('Button',{on:{\"click\":_vm.removeDraw}},[_vm._v(\"移除画图功能\")]),_c('Button',{on:{\"click\":_vm.getDrawPx}},[_vm._v(\"获取选中画图范围\")]),_c('Button',{on:{\"click\":_vm.clearDraw}},[_vm._v(\"删除画图feature\")]),_vm._v(\"\\n  \"+_vm._s(_vm.obj.arr.constructor === Array)+\"\\n\")],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import \"ol/ol.css\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport { Style, Circle, Fill } from \"ol/style\";\nimport { fromLonLat } from \"ol/proj.js\";\nimport { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\nimport { OSM, Vector as VectorSource } from \"ol/source\";\nimport uuid from \"uuid\";\nimport Polygon from \"ol/geom/Polygon\";\nimport Draw, { createBox } from \"ol/interaction/Draw\";\n\nexport default class DrawLayer {\n  constructor() {\n    // 底图图层\n    const raster = new TileLayer({\n      source: new OSM(),\n    });\n    this.feature = null;\n    this.source = new VectorSource({ wrapX: true });\n    // 画图图层\n    this.drawLayer = new VectorLayer({\n      source: this.source,\n      //   style: [\n      //     new Style({\n      //       image: new Circle({\n      //         radius: 10,\n      //         fill: new Fill({\n      //           color: \"#003ade\",\n      //         }),\n      //       }),\n      //     }),\n      //   ],\n    });\n    this.map = new Map({\n      layers: [raster, this.drawLayer],\n      target: \"map\",\n      view: new View({\n        center: fromLonLat([120.32714457090765, 30.30569628128095]),\n        zoom: 11,\n      }),\n    });\n    this.map.on(\"dblclick\", (e) => {\n        console.log(\"双击666\", e);\n        if (this.draw.getActive()) {\n          this.remove();\n        }\n      });\n  }\n  add() {\n    this.clear();\n    this.draw = new Draw({\n      id: uuid(),\n      source: this.source,\n      type: \"Polygon\", // Circle: 所画图形为圆形 Polygon: 所画图形多边形\n      //   style: [\n      //     new Style({\n      //       image: new Circle({\n      //         radius: 10,\n      //         fill: new Fill({\n      //           color: \"#003ade\",\n      //         }),\n      //       }),\n      //     }),\n      //   ],\n      freehand: true,  // true: 拖拽画图; false:点击画图\n      // geometryFunction: createBox(), // 当type为\"Circle\"时,不添加该参数为画圆,添加该参数为画方\n    });\n    this.draw.on(\"drawend\", (e) => {\n      console.log(\"画完了\", e);\n      this.feature = e.feature;\n      this.remove();\n    });\n    this.map.addInteraction(this.draw);\n  }\n  remove() {\n    this.map.removeInteraction(this.draw);\n  }\n  clear() {\n    if (!this.draw || !this.feature) {\n      return;\n    }\n    this.drawLayer.getSource().removeFeature(this.feature);\n    this.feature = null;\n  }\n\n  // 获取选中区域元素\n  get() {\n    if (!this.feature) {\n      return null;\n    }\n    const polygon = this.feature.getGeometry();\n    console.log(\"polygon\", polygon);\n    const extent = polygon.getExtent();\n    return extent;\n  }\n}\n","<template>\n  <div>\n    <div id=\"map\" :class=\"$style['map']\"></div>\n    <Button @click=\"addDraw\">添加画图功能</Button>\n    <Button @click=\"removeDraw\">移除画图功能</Button>\n    <Button @click=\"getDrawPx\">获取选中画图范围</Button>\n    <Button @click=\"clearDraw\">删除画图feature</Button>\n    {{obj.arr.constructor === Array}}\n  </div>\n</template>\n<script>\nimport Draw from '@/views/ol/js/draw.js';\n\nexport default {\n  name: \"DrawMap\",\n  data() {\n    return {\n      draw: null,\n      obj: {\n        arr: [\n          {\n            name: '1',\n          }\n        ]\n      }\n    };\n  },\n  mounted() {\n    this.initMap();\n  },\n  methods: {\n    initMap() {\n      this.draw = new Draw();\n    },\n    addDraw() {\n      this.draw.add();\n    },\n    removeDraw() {\n      this.draw.remove();\n    },\n    clearDraw() {\n      this.draw.clear();\n    },\n    getDrawPx() {\n      let px = this.draw.get();\n      console.log('px', px)\n    }\n  },\n};\n</script>\n\n<style lang=\"less\" module>\n.map {\n  width: 100%;\n  height: 500px;\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DrawMap.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DrawMap.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DrawMap.vue?vue&type=template&id=0a6b8e3d&\"\nimport script from \"./DrawMap.vue?vue&type=script&lang=js&\"\nexport * from \"./DrawMap.vue?vue&type=script&lang=js&\"\nimport style0 from \"./DrawMap.vue?vue&type=style&index=0&lang=less&module=true&\"\n\n\n\n\nfunction injectStyles (context) {\n  \n  this[\"$style\"] = (style0.locals || style0)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  null\n  \n)\n\nexport default component.exports","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"DrawMap_map_1n72K\"};","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-0-0!../../../node_modules/css-loader/index.js??ref--10-oneOf-0-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-0-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-0-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DrawMap.vue?vue&type=style&index=0&lang=less&module=true&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-0-0!../../../node_modules/css-loader/index.js??ref--10-oneOf-0-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-0-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-0-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DrawMap.vue?vue&type=style&index=0&lang=less&module=true&\"","/**\n * @module ol/geom/Circle\n */\nimport {createOrUpdate, forEachCorner, intersects} from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {deflateCoordinate} from './flat/deflate.js';\n\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nvar Circle = /*@__PURE__*/(function (SimpleGeometry) {\n  function Circle(center, opt_radius, opt_layout) {\n    SimpleGeometry.call(this);\n    if (opt_layout !== undefined && opt_radius === undefined) {\n      this.setFlatCoordinates(opt_layout, center);\n    } else {\n      var radius = opt_radius ? opt_radius : 0;\n      this.setCenterAndRadius(center, radius, opt_layout);\n    }\n  }\n\n  if ( SimpleGeometry ) Circle.__proto__ = SimpleGeometry;\n  Circle.prototype = Object.create( SimpleGeometry && SimpleGeometry.prototype );\n  Circle.prototype.constructor = Circle;\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @override\n   * @api\n   */\n  Circle.prototype.clone = function clone () {\n    return new Circle(this.flatCoordinates.slice(), undefined, this.layout);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Circle.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {\n    var flatCoordinates = this.flatCoordinates;\n    var dx = x - flatCoordinates[0];\n    var dy = y - flatCoordinates[1];\n    var squaredDistance = dx * dx + dy * dy;\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (var i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        var delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n        for (var i$1 = 2; i$1 < this.stride; ++i$1) {\n          closestPoint[i$1] = flatCoordinates[i$1];\n        }\n      }\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Circle.prototype.containsXY = function containsXY (x, y) {\n    var flatCoordinates = this.flatCoordinates;\n    var dx = x - flatCoordinates[0];\n    var dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  };\n\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n  Circle.prototype.getCenter = function getCenter () {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Circle.prototype.computeExtent = function computeExtent (extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(\n      flatCoordinates[0] - radius, flatCoordinates[1] - radius,\n      flatCoordinates[0] + radius, flatCoordinates[1] + radius,\n      extent);\n  };\n\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n  Circle.prototype.getRadius = function getRadius () {\n    return Math.sqrt(this.getRadiusSquared_());\n  };\n\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n  Circle.prototype.getRadiusSquared_ = function getRadiusSquared_ () {\n    var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Circle.prototype.getType = function getType () {\n    return GeometryType.CIRCLE;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Circle.prototype.intersectsExtent = function intersectsExtent (extent) {\n    var circleExtent = this.getExtent();\n    if (intersects(extent, circleExtent)) {\n      var center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate, this);\n    }\n    return false;\n\n  };\n\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n  Circle.prototype.setCenter = function setCenter (center) {\n    var stride = this.stride;\n    var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    var flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n    for (var i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  };\n\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @api\n   */\n  Circle.prototype.setCenterAndRadius = function setCenterAndRadius (center, radius, opt_layout) {\n    this.setLayout(opt_layout, center, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n    var flatCoordinates = this.flatCoordinates;\n    var offset = deflateCoordinate(\n      flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n    for (var i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n    flatCoordinates.length = offset;\n    this.changed();\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Circle.prototype.getCoordinates = function getCoordinates () {\n    return null;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Circle.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {};\n\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n  Circle.prototype.setRadius = function setRadius (radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  };\n\n  return Circle;\n}(SimpleGeometry));\n\n\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;\n\n//# sourceMappingURL=Circle.js.map","/**\n * @module ol/interaction/Draw\n */\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport {getChangeEventType} from '../Object.js';\nimport {squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\nimport {listen} from '../events.js';\nimport Event from '../events/Event.js';\nimport {noModifierKeys, always, shiftKeyOnly} from '../events/condition.js';\nimport {boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight} from '../extent.js';\nimport {TRUE, FALSE} from '../functions.js';\nimport Circle from '../geom/Circle.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport {POINTER_TYPE} from '../pointer/MouseSource.js';\nimport Point from '../geom/Point.js';\nimport Polygon, {fromCircle, makeRegular} from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport InteractionProperty from './Property.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {GeometryType} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry as\n * arguments, and returns a geometry. The optional existing geometry is the\n * geometry that is returned when the function is called without a second\n * argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default=):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nvar Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n\n\n/**\n * @enum {string}\n */\nvar DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nvar DrawEvent = /*@__PURE__*/(function (Event) {\n  function DrawEvent(type, feature) {\n\n    Event.call(this, type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n\n  }\n\n  if ( Event ) DrawEvent.__proto__ = Event;\n  DrawEvent.prototype = Object.create( Event && Event.prototype );\n  DrawEvent.prototype.constructor = DrawEvent;\n\n  return DrawEvent;\n}(Event));\n\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nvar Draw = /*@__PURE__*/(function (PointerInteraction) {\n  function Draw(options) {\n\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    PointerInteraction.call(this, pointerOptions);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {?}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {GeometryType}\n     * @private\n     */\n    this.type_ = /** @type {GeometryType} */ (options.type);\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints ?\n      options.minPoints :\n      (this.mode_ === Mode.POLYGON ? 3 : 2);\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n\n    var geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      if (this.type_ === GeometryType.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function(coordinates, opt_geometry) {\n          var circle = opt_geometry ? /** @type {Circle} */ (opt_geometry) :\n            new Circle([NaN, NaN]);\n          var squaredLength = squaredCoordinateDistance(\n            coordinates[0], coordinates[1]);\n          circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));\n          return circle;\n        };\n      } else {\n        var Constructor;\n        var mode = this.mode_;\n        if (mode === Mode.POINT) {\n          Constructor = Point;\n        } else if (mode === Mode.LINE_STRING) {\n          Constructor = LineString;\n        } else if (mode === Mode.POLYGON) {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function(coordinates, opt_geometry) {\n          var geometry = opt_geometry;\n          if (geometry) {\n            if (mode === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor(coordinates);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance ?\n      options.clickTolerance * options.clickTolerance : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style :\n        getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition ?\n        options.freehandCondition : shiftKeyOnly;\n    }\n\n    listen(this,\n      getChangeEventType(InteractionProperty.ACTIVE),\n      this.updateState_, this);\n\n  }\n\n  if ( PointerInteraction ) Draw.__proto__ = PointerInteraction;\n  Draw.prototype = Object.create( PointerInteraction && PointerInteraction.prototype );\n  Draw.prototype.constructor = Draw;\n\n  /**\n   * @inheritDoc\n   */\n  Draw.prototype.setMap = function setMap (map) {\n    PointerInteraction.prototype.setMap.call(this, map);\n    this.updateState_();\n  };\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  Draw.prototype.getOverlay = function getOverlay () {\n    return this.overlay_;\n  };\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @override\n   * @api\n   */\n  Draw.prototype.handleEvent = function handleEvent (event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    var move = event.type === MapBrowserEventType.POINTERMOVE;\n    var pass = true;\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      var now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (this.freehand_ &&\n        event.type === MapBrowserEventType.POINTERDRAG &&\n        this.sketchFeature_ !== null) {\n      this.addToDrawing_(event);\n      pass = false;\n    } else if (this.freehand_ &&\n        event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        pass = this.handlePointerMove_(event);\n      } else if (/** @type {MapBrowserPointerEvent} */ (event).pointerEvent.pointerType == POINTER_TYPE ||\n          (event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined)) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return PointerInteraction.prototype.handleEvent.call(this, event) && pass;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Draw.prototype.handleDownEvent = function handleDownEvent (event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n      }\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function() {\n        this.handlePointerMove_(new MapBrowserPointerEvent(\n          MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n\n  /**\n   * @inheritDoc\n   */\n  Draw.prototype.handleUpEvent = function handleUpEvent (event) {\n    var pass = true;\n\n    if (this.downTimeout_) {\n      clearTimeout(this.downTimeout_);\n      this.downTimeout_ = undefined;\n    }\n\n    this.handlePointerMove_(event);\n\n    var circleMode = this.mode_ === Mode.CIRCLE;\n\n    if (this.shouldHandle_) {\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n        if (this.mode_ === Mode.POINT) {\n          this.finishDrawing();\n        }\n      } else if (this.freehand_ || circleMode) {\n        this.finishDrawing();\n      } else if (this.atFinish_(event)) {\n        if (this.finishCondition_(event)) {\n          this.finishDrawing();\n        }\n      } else {\n        this.addToDrawing_(event);\n      }\n      pass = false;\n    } else if (this.freehand_) {\n      this.finishCoordinate_ = null;\n      this.abortDrawing_();\n    }\n    if (!pass && this.stopClick_) {\n      event.stopPropagation();\n    }\n    return pass;\n  };\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @return {boolean} Pass the event to other interactions.\n   * @private\n   */\n  Draw.prototype.handlePointerMove_ = function handlePointerMove_ (event) {\n    if (this.downPx_ &&\n        ((!this.freehand_ && this.shouldHandle_) ||\n        (this.freehand_ && !this.shouldHandle_))) {\n      var downPx = this.downPx_;\n      var clickPx = event.pixel;\n      var dx = downPx[0] - clickPx[0];\n      var dy = downPx[1] - clickPx[1];\n      var squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ?\n        squaredDistance > this.squaredClickTolerance_ :\n        squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return true;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event);\n    } else {\n      this.createOrUpdateSketchPoint_(event);\n    }\n    return true;\n  };\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  Draw.prototype.atFinish_ = function atFinish_ (event) {\n    var at = false;\n    if (this.sketchFeature_) {\n      var potentiallyDone = false;\n      var potentiallyFinishCoordinates = [this.finishCoordinate_];\n      if (this.mode_ === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (this.mode_ === Mode.POLYGON) {\n        var sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n      if (potentiallyDone) {\n        var map = event.map;\n        for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          var finishCoordinate = potentiallyFinishCoordinates[i];\n          var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          var pixel = event.pixel;\n          var dx = pixel[0] - finishPixel[0];\n          var dy = pixel[1] - finishPixel[1];\n          var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  };\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.createOrUpdateSketchPoint_ = function createOrUpdateSketchPoint_ (event) {\n    var coordinates = event.coordinate.slice();\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      var sketchPointGeom = /** @type {Point} */ (this.sketchPoint_.getGeometry());\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  };\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.startDrawing_ = function startDrawing_ (event) {\n    var start = event.coordinate;\n    this.finishCoordinate_ = start;\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(\n        new LineString(this.sketchLineCoords_));\n    }\n    var geometry = this.geometryFunction_(this.sketchCoords_);\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.modifyDrawing_ = function modifyDrawing_ (event) {\n    var coordinate = event.coordinate;\n    var geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (this.sketchFeature_.getGeometry());\n    var coordinates, last;\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(event)) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(/** @type {!LineCoordType} */ (this.sketchCoords_), geometry);\n    if (this.sketchPoint_) {\n      var sketchPointGeom = /** @type {Point} */ (this.sketchPoint_.getGeometry());\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    /** @type {LineString} */\n    var sketchLineGeom;\n    if (geometry.getType() == GeometryType.POLYGON &&\n        this.mode_ !== Mode.POLYGON) {\n      if (!this.sketchLine_) {\n        this.sketchLine_ = new Feature();\n      }\n      var ring = /** @type {Polygon} */ (geometry).getLinearRing(0);\n      sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());\n      if (!sketchLineGeom) {\n        sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n        this.sketchLine_.setGeometry(sketchLineGeom);\n      } else {\n        sketchLineGeom.setFlatCoordinates(\n          ring.getLayout(), ring.getFlatCoordinates());\n        sketchLineGeom.changed();\n      }\n    } else if (this.sketchLineCoords_) {\n      sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  };\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.addToDrawing_ = function addToDrawing_ (event) {\n    var coordinate = event.coordinate;\n    var geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (this.sketchFeature_.getGeometry());\n    var done;\n    var coordinates;\n    if (this.mode_ === Mode.LINE_STRING) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  };\n\n  /**\n   * Remove last point of the feature currently being drawn.\n   * @api\n   */\n  Draw.prototype.removeLastPoint = function removeLastPoint () {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    var geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (this.sketchFeature_.getGeometry());\n    var coordinates;\n    /** @type {LineString} */\n    var sketchLineGeom;\n    if (this.mode_ === Mode.LINE_STRING) {\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      coordinates.splice(-2, 1);\n      this.geometryFunction_(coordinates, geometry);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n      }\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      coordinates.splice(-2, 1);\n      sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n\n    if (coordinates.length === 0) {\n      this.finishCoordinate_ = null;\n    }\n\n    this.updateSketchFeatures_();\n  };\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  Draw.prototype.finishDrawing = function finishDrawing () {\n    var sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    var coordinates = this.sketchCoords_;\n    var geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (sketchFeature.getGeometry());\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */ (coordinates)[0].pop();\n      this.geometryFunction_(coordinates, geometry);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([/** @type {PointCoordType} */(coordinates)]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([/** @type {LineCoordType} */(coordinates)]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([/** @type {PolyCoordType} */(coordinates)]));\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  };\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature} The sketch feature (or null if none).\n   * @private\n   */\n  Draw.prototype.abortDrawing_ = function abortDrawing_ () {\n    this.finishCoordinate_ = null;\n    var sketchFeature = this.sketchFeature_;\n    if (sketchFeature) {\n      this.sketchFeature_ = null;\n      this.sketchPoint_ = null;\n      this.sketchLine_ = null;\n      /** @type {VectorSource} */ (this.overlay_.getSource()).clear(true);\n    }\n    return sketchFeature;\n  };\n\n  /**\n   * Extend an existing geometry by adding additional points. This only works\n   * on features with `LineString` geometries, where the interaction will\n   * extend lines by adding points to the end of the coordinates array.\n   * @param {!Feature} feature Feature to be extended.\n   * @api\n   */\n  Draw.prototype.extend = function extend (feature) {\n    var geometry = feature.getGeometry();\n    var lineString = /** @type {LineString} */ (geometry);\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  Draw.prototype.updateSketchFeatures_ = function updateSketchFeatures_ () {\n    var sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    var overlaySource = /** @type {VectorSource} */ (this.overlay_.getSource());\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  };\n\n  /**\n   * @private\n   */\n  Draw.prototype.updateState_ = function updateState_ () {\n    var map = this.getMap();\n    var active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing_();\n    }\n    this.overlay_.setMap(active ? map : null);\n  };\n\n  return Draw;\n}(PointerInteraction));\n\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  return function(feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function(coordinates, opt_geometry) {\n    var center = /** @type {LineCoordType} */ (coordinates)[0];\n    var end = /** @type {LineCoordType} */ (coordinates)[1];\n    var radius = Math.sqrt(\n      squaredCoordinateDistance(center, end));\n    var geometry = opt_geometry ? /** @type {Polygon} */ (opt_geometry) :\n      fromCircle(new Circle(center), opt_sides);\n    var angle = opt_angle;\n    if (!opt_angle) {\n      var x = end[0] - center[0];\n      var y = end[1] - center[1];\n      angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);\n    }\n    makeRegular(geometry, center, radius, angle);\n    return geometry;\n  };\n}\n\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return (\n    function(coordinates, opt_geometry) {\n      var extent = boundingExtent(/** @type {LineCoordType} */ (coordinates));\n      var boxCoordinates = [[\n        getBottomLeft(extent),\n        getBottomRight(extent),\n        getTopRight(extent),\n        getTopLeft(extent),\n        getBottomLeft(extent)\n      ]];\n      var geometry = opt_geometry;\n      if (geometry) {\n        geometry.setCoordinates(boxCoordinates);\n      } else {\n        geometry = new Polygon(boxCoordinates);\n      }\n      return geometry;\n    }\n  );\n}\n\n\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {GeometryType} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  var mode;\n  if (type === GeometryType.POINT ||\n      type === GeometryType.MULTI_POINT) {\n    mode = Mode.POINT;\n  } else if (type === GeometryType.LINE_STRING ||\n      type === GeometryType.MULTI_LINE_STRING) {\n    mode = Mode.LINE_STRING;\n  } else if (type === GeometryType.POLYGON ||\n      type === GeometryType.MULTI_POLYGON) {\n    mode = Mode.POLYGON;\n  } else if (type === GeometryType.CIRCLE) {\n    mode = Mode.CIRCLE;\n  }\n  return (\n    /** @type {!Mode} */ (mode)\n  );\n}\n\n\nexport default Draw;\n\n//# sourceMappingURL=Draw.js.map","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n"],"sourceRoot":""}